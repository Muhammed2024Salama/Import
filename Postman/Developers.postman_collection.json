{
	"info": {
		"_postman_id": "224b08ee-eb39-44ab-9fbc-9e8661872e65",
		"name": "Developers",
		"description": "### üìÅ **Collection Name**: Developer API\n\n---\n\n#### üìå **1\\. Get All Developers**\n\n- **Method**: `GET`\n    \n- **URL**: `http://your-domain.test/api/developers`\n    \n- **Headers**:\n    \n    - `Accept: application/json`\n        \n\n#### üìå **2\\. Create Developer**\n\n- **Method**: `POST`\n    \n- **URL**: `http://your-domain.test/api/developers`\n    \n- **Headers**:\n    \n    - `Accept: application/json`\n        \n    - `Content-Type: multipart/form-data`\n        \n- KeyValue (Example)TypenameJohn Doetextemail[john@example.com](https://null)textphone_number1234567890textwebsite[https://johndoe.dev](https://johndoe.dev)textdescriptionLaravel developertextstatusACTIVEtextlogo_(choose file)_file\n    \n\n---\n\n#### üìå **3\\. Get Single Developer**\n\n- **Method**: `GET`\n    \n- **URL**: `http://your-domain.test/api/developers/{developer_id}`\n    \n- **Headers**:\n    \n    - `Accept: application/json`\n        \n\n---\n\n#### üìå **4\\. Update Developer**\n\n- **Method**: `POST` or `PUT` _(based on Laravel route definition)_\n    \n- **URL**: `http://your-domain.test/api/developers/{developer_id}?_method=PUT`\n    \n- **Headers**:\n    \n    - `Accept: application/json`\n        \n    - `Content-Type: multipart/form-data`\n        \n- **Body (form-data)**:\n    \n    - Any field you want to update (same as create)\n        \n    - Include `logo` file only if updating image\n        \n\n---\n\n#### üìå **5\\. Delete Developer**\n\n- **Method**: `DELETE`\n    \n- **URL**: `http://your-domain.test/api/developers/{developer_id}`\n    \n- **Headers**:\n    \n    - `Accept: application/json`",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43162929"
	},
	"item": [
		{
			"name": "Developer Import",
			"item": [
				{
					"name": "Developer Import API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `",
									"<style type=\"text/css\">",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
									"    .tftable tr {background-color:#ffffff;}",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
									"    .tftable tr:hover {background-color:#e0ffff;}",
									"</style>",
									"",
									"<table class=\"tftable\" border=\"1\">",
									"    <tr>",
									"        <th>Name</th>",
									"        <th>Email</th>",
									"        <th>Phone Number</th>",
									"        <th>Website</th>",
									"        <th>Logo</th>",
									"        <th>Description</th>",
									"        <th>Status</th>",
									"        <th>Updated At</th>",
									"        <th>Created At</th>",
									"        <th>Developer ID</th>",
									"    </tr>",
									"    ",
									"    {{#each response.data}}",
									"        <tr>",
									"            <td>{{name}}</td>",
									"            <td>{{email}}</td>",
									"            <td>{{phone_number}}</td>",
									"            <td>{{website}}</td>",
									"            <td>{{logo}}</td>",
									"            <td>{{description}}</td>",
									"            <td>{{status}}</td>",
									"            <td>{{updated_at}}</td>",
									"            <td>{{created_at}}</td>",
									"            <td>{{developer_id}}</td>",
									"        </tr>",
									"    {{/each}}",
									"</table>",
									"`;",
									"",
									"function constructVisualizerPayload() {",
									"    return {response: pm.response.json()}",
									"}",
									"",
									"pm.visualizer.set(template, constructVisualizerPayload());",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach(function(item) {",
									"        pm.expect(item).to.have.property('name');",
									"        pm.expect(item).to.have.property('email');",
									"        pm.expect(item).to.have.property('phone_number');",
									"        pm.expect(item).to.have.property('website');",
									"        pm.expect(item).to.have.property('logo');",
									"        pm.expect(item).to.have.property('description');",
									"        pm.expect(item).to.have.property('status');",
									"        pm.expect(item).to.have.property('updated_at');",
									"        pm.expect(item).to.have.property('created_at');",
									"        pm.expect(item).to.have.property('developer_id');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.data).to.be.an('array');",
									"",
									"  responseData.data.forEach((developer) => {",
									"    pm.expect(developer.email).to.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Phone number is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    responseData.data.forEach(function(item) {",
									"        pm.expect(item.phone_number).to.match(/^\\+?\\d{0,3}\\s?\\(?\\d{3}\\)?[-.\\s]?\\d{3}[-.\\s]?\\d{4}$/);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/home/developer/Documents/Developers.xlsx"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/developers/import",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"developers",
								"import"
							]
						}
					},
					"response": []
				}
			],
			"description": "## üìò Postman Documentation ‚Äì Developer Import API\n\n### ‚úÖ **1\\. Request Overview**\n\n| Property | Value |\n| --- | --- |\n| **Method** | `POST` |\n| **URL** | `{{base_url}}/api/developers/import` |\n| **Auth** | (Optional ‚Äì depends on your app, e.g. Bearer Token) |\n| **Content Type** | `multipart/form-data` |\n\n---\n\n### üì§ **2\\. Request Body Parameters**\n\n| Field | Type | Required | Description |\n| --- | --- | --- | --- |\n| file | `file` | ‚úÖ | Excel/CSV file (`.xlsx`, `.xls`, or `.csv`) |\n\n**Example of expected Excel columns:**\n\n```\ntextCopyEditname | email           | phone number | website      | logo     | description     | status\nAli  | ali@test.com    | 01000000000  | ali.com      | logo.png | Test developer  | active\nSara | sara@test.com   | 01000000001  | sara.dev     | logo2.png| Freelancer      | inactive\n\n ```\n\n---\n\n### ‚úÖ **3\\. Success Response**\n\n```\njsonCopyEdit{\n  \"success\": true,\n  \"message\": \"Developers imported successfully.\",\n  \"data\": [\n    {\n      \"name\": \"Ali\",\n      \"email\": \"ali@test.com\",\n      \"phone_number\": \"01000000000\",\n      \"status\": \"active\"\n    },\n    {\n      \"name\": \"Sara\",\n      \"email\": \"sara@test.com\",\n      \"phone_number\": \"01000000001\",\n      \"status\": \"inactive\"\n    }\n  ]\n}\n\n ```\n\n---\n\n### ‚ùå **4\\. Validation Error Response**\n\n```\njsonCopyEdit{\n  \"message\": \"The given data was invalid.\",\n  \"errors\": {\n    \"file\": [\n      \"The file field is required.\"\n    ]\n  }\n}\n\n ```\n\n---\n\n### ‚ùå **5\\. Import Exception Response**\n\n```\njsonCopyEdit{\n  \"success\": false,\n  \"message\": \"Row error: Invalid status: unknown\"\n}\n\n ```\n\n---\n\n## üõ†Ô∏è Tips for Postman Usage\n\n- **Authorization**: If you're using Sanctum, Passport, or JWT, use **Bearer Token** in the \"Authorization\" tab.\n    \n- **Uploading the file**: Use the `form-data` tab, and set the field key as `file`, with **type set to File**.\n    \n- **Base URL**: If you're working locally, it might look like `http://127.0.0.1:8000`."
		},
		{
			"name": "Get All Developers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json().data;",
							"",
							"    responseData.forEach(function(developer) {",
							"        pm.expect(developer).to.include.all.keys('developer_id', 'name', 'email', 'phone_number', 'website', 'logo', 'description', 'status', 'created_at', 'updated_at');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.data.forEach(function(developer) {",
							"        pm.expect(developer.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Phone number is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  responseData.data.forEach(function(developer) {",
							"    pm.expect(developer.phone_number).to.match(/^\\d{10}$/);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Data array is present and contains expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('data').that.is.an('array').with.lengthOf.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:8000/api/developers",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"developers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Developer",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "John Doe",
							"type": "text"
						},
						{
							"key": "email",
							"value": "john@example.com\t",
							"type": "text"
						},
						{
							"key": "phone_number",
							"value": "1234567890",
							"type": "text"
						},
						{
							"key": "website",
							"value": "https://johndoe.dev\t",
							"type": "text"
						},
						{
							"key": "description",
							"value": "Laravel developer",
							"type": "text"
						},
						{
							"key": "status",
							"value": "ACTIVE",
							"type": "text"
						},
						{
							"key": "logo",
							"type": "file",
							"src": "/home/developer/Desktop/2.jpeg"
						}
					]
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/developers",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"developers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Developer",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "John Doe",
							"type": "text"
						},
						{
							"key": "email",
							"value": "john@example.com\t",
							"type": "text"
						},
						{
							"key": "phone_number",
							"value": "1234567890",
							"type": "text"
						},
						{
							"key": "website",
							"value": "https://johndoe.dev\t",
							"type": "text"
						},
						{
							"key": "description",
							"value": "Laravel developer",
							"type": "text"
						},
						{
							"key": "status",
							"value": "ACTIVE",
							"type": "text"
						},
						{
							"key": "logo",
							"type": "file",
							"src": "/home/developer/Desktop/2.jpeg"
						}
					]
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/developers/1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"developers",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single Developer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.developer_id).to.exist;",
							"    pm.expect(responseData.data.name).to.exist;",
							"    pm.expect(responseData.data.email).to.exist;",
							"    pm.expect(responseData.data.phone_number).to.exist;",
							"    pm.expect(responseData.data.website).to.exist;",
							"    pm.expect(responseData.data.logo).to.exist;",
							"    pm.expect(responseData.data.description).to.exist;",
							"    pm.expect(responseData.data.status).to.exist;",
							"    pm.expect(responseData.data.created_at).to.exist;",
							"    pm.expect(responseData.data.updated_at).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");",
							"});",
							"",
							"",
							"pm.test(\"Phone number is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data.phone_number).to.be.a('string').and.to.match(/^\\+\\d{1,3}\\d{10}$/);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:8000/api/developers/4",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"developers",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Developer",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:8000/api/developers/1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"developers",
						"1"
					]
				}
			},
			"response": []
		}
	]
}